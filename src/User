import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

public class User extends Subject implements SysEntry, UserInterface, Observer, Comparable<User> {
    private String id;
    private long userCreated, lastUpdated;
    private List<String> followerIds;
    private List<String> followingIds;
    private List<String> tweetMsgs;
    private List<User> following;
    private static int numberUsers = 0;
    private static int numberMsgs = 0;
    private static double posNum = 0;

    public User(String id){
        this.id = id;
        followingIds = new ArrayList<>();
        followerIds = new ArrayList<>();
        tweetMsgs = new ArrayList<>();
        following = new ArrayList<>();
        numberUsers++;
        userCreated = System.currentTimeMillis();
        lastUpdated = System.currentTimeMillis();
    }
    public User(String id, List<String> followerIds, List<String> followingIds, List<String> tweetMsgs){
        this.id = id;
        this.followerIds = followerIds;
        this.followingIds = followingIds;
        this.tweetMsgs = tweetMsgs;
        numberUsers++;
    }

    public void followUser(User user, String id){
        if(user.toString().equalsIgnoreCase(id) && !user.followerIds.contains(id)) {
            user.followerIds.add(this.toString());
            this.followingIds.add(id);
            this.following.add(user);
            this.getTweetMsgs().addAll(user.getTweetMsgs());
        }
    }
    public void getNewsFeed(){
        for (User user: following) {
            this.getTweetMsgs().addAll(user.getTweetMsgs());
        }
    }
    public Date getCreationTime(){
        return new Date(userCreated);
    }
    public Date getLastUpdated(){
        return new Date(lastUpdated);
    }
    public int getMsgTotal(){
         return tweetMsgs.size();
    }
    public double getPosPercent(){
        for(int i =0; i < this.getTweetMsgs().size();i++){
            for(String sublist : tweetMsgs){
                      if(sublist.contains("good") || sublist.contains("great") || sublist.contains("amazing")){
                          posNum++;
                      }
            }
        }
        return posNum/(double)numberMsgs;
    }
    public void Tweet(String tweet){
        lastUpdated = System.currentTimeMillis();
        tweetMsgs.add("("+ this.toString() + ")" + ": " + tweet);
        getNewsFeed();
        notifyObservers();
    }

    public String toString(){
        return id;
    }
    public int getNumberOfUsers(){
        return numberUsers;
    }
    public long getUserCreated(){return userCreated;}
    public List<String> getFollowingIds(){
        return followingIds;
    }
    public List<String> getFollowerIds() {
        return followerIds;
    }
    public List<String> getTweetMsgs(){
        return tweetMsgs;
    }

    @Override
    public void accept(SysEntryVisitor sysEntryVisitor) {
        sysEntryVisitor.visit(this);
    }


    @Override
    public void update(Subject subject) {
        if(subject instanceof User){
            for(String userId : ((User) subject).getFollowingIds()){
                getTweetMsgs().add((((User) subject).getTweetMsgs().toString()));
            }
        }
    }

    @Override
    public int compareTo(User user) {
        return (int)(this.lastUpdated - user.lastUpdated);
    }
}
